# 定义命名空间
apiVersion: v1
kind: Namespace
metadata:
  name: drone-demo-ns
---
# 定义服务
apiVersion: v1
kind: Service
metadata:
  name: drone-demo-svc
  # 指定命名空间
  namespace: drone-demo-ns
spec:
  selector:
    app: drone-demo
  ports:
    - protocol: TCP
      port: 8080            # 服务端口, 内部可访问
      targetPort: 9999      # 目标端口, 此处指的是pod的8080端口
#      nodePort: 30080		# 节点端口, 外部可访问
  # 1. ClusterIP(默认):在群集中的内部IP上公布服务，这种方式的 Service（服务）只在集群内部可以访问到
  # 2. NodePort：使用 NAT 在集群中每个的同一端口上公布服务。这种方式下，可以通过访问集群中任意节点+端口号的方式访问服务 <NodeIP>:<NodePort>。此时 ClusterIP 的访问方式仍然可用。
  # 3. LoadBalancer：在云环境中（需要云供应商可以支持）创建一个集群外部的负载均衡器，并为使用该负载均衡器的 IP 地址作为服务的访问地址。此时 ClusterIP 和 NodePort 的访问方式仍然可用。
  type: NodePort
---
#定义Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: drone-demo
  # 指定命名空间
  namespace: drone-demo-ns
  # 定义标签
  labels:
    app: drone-demo
spec:
  replicas: 2
  selector:
    # 查找匹配标签
    matchLabels:
      app: drone-demo
  template:
    metadata:
      name: drone-demo
      # 定义标签
      labels:
        app: drone-demo
    spec:
      # 容器重启策略
      restartPolicy: Always
      containers:
        - name: drone-demo
#          image: registry.cn-hangzhou.aliyuncs.com/zywlxh/drone-demo
          image: harbor.xa/library/drone-demo
          # 镜像拉取策略
          imagePullPolicy: Always
          ports:
            - containerPort: 9999
          volumeMounts:
            - mountPath: "/mnt/data"
              name: local-test
      volumes:
        - name: local-test
          persistentVolumeClaim:
            # Rancher中创建了一个名为test的PVC
            claimName: nfs
---
# 定义Ingress
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: drone-demo-ingress
  # 指定命名空间
  namespace: drone-demo-ns
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: drone.v5cn.cn
      http:
        paths:
          - path: /
            backend:
              serviceName: drone-demo-svc
              servicePort: 8080
  